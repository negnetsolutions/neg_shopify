<?php

/**
 * @file
 * Shopify module.
 */

use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Url;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Render\Element;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\neg_shopify\Entity\ShopifyProduct;
use Drupal\neg_shopify\ShopifyCollection;
use Drupal\neg_shopify\Settings;
use Drupal\neg_shopify\Plugin\Sync;
use Drupal\image\Entity\ImageStyle;
use Drupal\neg_shopify\UserManagement;
use Drupal\neg_shopify\ShopifyCustomer;
use Drupal\neg_shopify\Entity\ShopifyProductVariant;

/**
 * Implements hook_theme().
 */
function neg_shopify_theme($existing, $type, $theme, $path) {
  return [
    'field__extra_images' => [
      'template' => 'field--extra-images',
      'base hook' => 'field',
    ],
    'paragraph__shopify_product' => [
      'template' => 'paragraph--shopify-product',
      'base hook' => 'paragraph',
    ],
    'paragraph__shopify_collection' => [
      'template' => 'paragraph--shopify-collection',
      'base hook' => 'paragraph',
    ],
    'paragraph__shopify_collections' => [
      'template' => 'paragraph--shopify-collection',
      'base hook' => 'paragraph',
    ],
    'taxonomy_term__shopify_collections' => [
      'template' => 'shopify-collection' ,
      'base hook' => 'taxonomy_term',
    ],
    'shopify-xml-feed' => [
      'template' => 'shopify-xml-feed' ,
      'variables' => [
        'products' => NULL,
        'name' => NULL,
        'link' => NULL,
      ],
    ],
    'shopify_vendor_product_grid' => [
      'template' => 'shopify-vendor-product-grid' ,
      'variables' => [
        'attributes' => NULL,
        'products' => NULL,
      ],
    ],
    'shopify_vendors_page' => [
      'template' => 'shopify-vendors-page' ,
      'variables' => [
        'attributes' => NULL,
        'name' => 'Vendors',
        'vendors' => NULL,
      ],
    ],
    'shopify-vendor-page' => [
      'template' => 'shopify-vendor-page' ,
      'variables' => [
        'attributes' => NULL,
        'name' => NULL,
        'products' => NULL,
      ],
    ],
    'shopify-collection-all' => [
      'template' => 'shopify-collection' ,
      'variables' => [
        'attributes' => NULL,
        'products' => NULL,
        'name' => NULL,
      ],
    ],
    'shopify_paragraph_product_grid' => [
      'template' => 'paragraph--product_grid',
      'variables' => [
        'products' => NULL,
        'totalProducts' => NULL,
        'showMore' => NULL,
        'more_url' => NULL,
      ],
    ],
    'shopify_related_items' => [
      'template' => 'related_items',
      'variables' => [
        'items' => NULL,
      ],
    ],
    'shopify_product_grid' => [
      'template' => 'product_grid',
      'variables' => [
        'products' => NULL,
        'count' => NULL,
        'defaultSort' => NULL,
        'allowManualSort' => FALSE,
        'controls' => TRUE,
        'products_label' => 'products',
      ],
    ],
    'neg_shopify_cart' => [
      'template' => 'cart',
      'variables' => [],
    ],
    'neg_shopify_minicart' => [
      'template' => 'mini-cart',
      'variables' => [],
    ],
    'neg_shopify_order_receipt' => [
      'template' => 'order-receipt',
      'variables' => [
        'order' => NULL,
      ],
    ],
    'neg_shopify_user_order_history' => [
      'template' => 'user-order-history',
      'variables' => [
        'email' => NULL,
        'perPage' => 5,
      ],
    ],
    'shopify_vendor' => [
      'render element' => 'elements',
    ],
    'shopify_vendor__teaser' => [
      'template' => 'shopify-vendor--teaser',
      'base hook' => 'shopify_vendor',
    ],
    'shopify_product' => [
      'render element' => 'elements',
    ],
    'shopify_product__xml_listing' => [
      'template' => 'shopify-product--xml-listing',
      'base hook' => 'shopify_product',
    ],
    'shopify_product__store_listing' => [
      'template' => 'shopify-product--store-listing',
      'base hook' => 'shopify_product',
    ],
    'shopify_product_variant' => [
      'render element' => 'elements',
    ],
    'shopify_product_variant__xml_listing' => [
      'template' => 'shopify-product-variant--xml-listing',
      'base hook' => 'shopify_product_variant',
    ],
    'shopify_product_variant__cart' => [
      'template' => 'shopify-product-variant--cart',
      'base hook' => 'shopify_product_variant',
    ],
  ];
}

/**
 * Implements hook_entity_type_alter().
 */
function neg_shopify_entity_type_alter(array &$entity_types) {
  if ((BOOL) Settings::config()->get('allow_shopify_users') === TRUE) {
    $user_entity_type = $entity_types['user'];
    $handlers = $user_entity_type->getHandlerClasses();
    $handlers['form']['default'] = 'Drupal\neg_shopify\Form\ShopifyUserEditForm';
    $user_entity_type->setHandlerClass('form', $handlers['form']);
  }
}

/**
 * Implements hook_form_alter().
 */
function neg_shopify_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'shopify_vendor_edit_form':
      unset($form['dynamic_thumbnail']);
      break;

    case 'user_pass':
      if ((BOOL) Settings::config()->get('allow_shopify_users') === TRUE) {
        $form = \Drupal::formBuilder()->getForm('Drupal\neg_shopify\Form\ShopifyUserPassForm');
      }

      break;

    case 'user_login_form':
      if ((BOOL) Settings::config()->get('allow_shopify_users') === TRUE) {
        // Replace form built at Drupal\user\Plugin\Block\UserLoginBlock.
        $form = \Drupal::formBuilder()->getForm('Drupal\neg_shopify\Form\ShopifyLoginForm');
      }

      $form['#cache']['tags'][] = 'config:neg_shopify.settings';
      break;

    case 'user_register_form':
      if ((BOOL) Settings::config()->get('allow_shopify_users') === TRUE) {
        // Replace form built at Drupal\user\Plugin\Block\UserLoginBlock.
        $form = \Drupal::formBuilder()->getForm('Drupal\neg_shopify\Form\ShopifyRegisterForm');
      }
      $form['#cache']['tags'][] = 'config:neg_shopify.settings';
      break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds "edit on shopify" link to the term operations for collections.
 */
function neg_shopify_form_taxonomy_overview_terms_alter(array &$form, FormStateInterface $form_state) {
  $vocab = $form_state->get(['taxonomy', 'vocabulary']);

  if ($vocab->id() == ShopifyProduct::SHOPIFY_COLLECTIONS_VID) {
    foreach (Element::children($form['terms']) as $key) {
      $term = $form['terms'][$key]['#term'];
      $form['terms'][$key]['operations']['#links']['edit_on_shopify'] = [
        'title' => t('Edit on Shopify'),
        'url' => Url::fromUri('https://' . Settings::shopInfo('domain') . '/admin/collections/' . $term->field_shopify_collection_id->value),
        'attributes' => ['target' => '_blank'],
      ];
      ksort($form['terms'][$key]['operations']['#links']);
      $form['terms'][$key]['operations']['#links'] = array_reverse($form['terms'][$key]['operations']['#links']);
    }
  }
}

/**
 * Implements hook_entity_bundle_info_alter().
 *
 * @todo Doesn't work because link_templates['canonical'] override this.
 *
 * @see Drupal\Core\Entity\Entity::toUrl()
 */
function neg_shopify_entity_bundle_info_alter(&$bundles) {
  if (isset($bundles['taxonomy_term']['shopify_tags'])) {
    $bundles['taxonomy_term']['shopify_tags']['uri_callback'] = 'shopify_taxonomy_tag_term_uri';
  }
  if (isset($bundles['taxonomy_term']['shopify_collections'])) {
    $bundles['taxonomy_term']['shopify_collections']['uri_callback'] = 'shopify_taxonomy_collection_term_uri';
  }
}

/**
 * Set the route for tag terms.
 */
function neg_shopify_taxonomy_tag_term_uri(Term $term) {
  return Url::fromUri('internal:/' . Settings::storeUrl('page_tag', $term->id()));
}

/**
 * Set the route for collection terms.
 */
function neg_shopify_taxonomy_collection_term_uri(Term $term) {
  return Url::fromUri('internal:/' . Settings::storeUrl('page_collection', $term->id()));
}

/**
 * Data that should be passed into drupalSettings.
 */
function neg_shopify_drupal_js_data() {
  $info = Settings::shopInfo();
  return [
    'shop' => [
      'domain' => $info->domain,
      'access_token' => Settings::accessToken(),
    ],
  ];
}

/**
 * Implements hook_entity_extra_field_info().
 */
function neg_shopify_entity_extra_field_info() {
  $extra = [];
  $extra['shopify_product']['shopify_product']['display']['add_to_cart_form'] = [
    'label' => t('Add to cart form'),
    'description' => t('Display variant options, quantity field, and "Add to Cart" button.'),
    'visible' => TRUE,
    'weight' => 100,
  ];
  $extra['shopify_product']['shopify_product']['display']['active_variant'] = [
    'label' => t('Active variant'),
    'description' => t('Renders the active variant.'),
    'visible' => TRUE,
    'weight' => 200,
  ];
  $extra['shopify_product']['shopify_product']['display']['related_items'] = [
    'label' => t('Related Items'),
    'description' => t('Displays related items'),
    'visible' => FALSE,
    'weight' => 255,
  ];
  $extra['shopify_product_variant']['shopify_product_variant']['display']['product_title'] = [
    'label' => t('Product Title'),
    'description' => t('Displays the parent product title'),
    'visible' => TRUE,
    'weight' => 150,
  ];
  $extra['shopify_product_variant']['shopify_product_variant']['display']['product_vendor'] = [
    'label' => t('Product Vendor'),
    'description' => t('Displays the parent product vendor'),
    'visible' => TRUE,
    'weight' => 150,
  ];
  $extra['shopify_product_variant']['shopify_product_variant']['display']['product_vendor'] = [
    'label' => t('Product Vendor'),
    'description' => t('Displays the parent product vendor'),
    'visible' => TRUE,
    'weight' => 150,
  ];
  $extra['shopify_vendor']['shopify_vendor']['display']['products'] = [
    'label' => t('Vendor Products'),
    'description' => t('Displays the vendor\'s products'),
    'visible' => TRUE,
    'weight' => 150,
  ];
  return $extra;
}

/**
 * Implements hook_toolbar().
 */
function neg_shopify_toolbar() {
  $items = [];

  $user = \Drupal::currentUser();

  if ($user->hasPermission('view shopify toolbar')) {
    $links = neg_shopify_renderable_links();
    $items['shopify'] = [
      '#type' => 'toolbar_item',
      'tab' => [
        '#type' => 'link',
        '#title' => t('Shopify'),
        '#url' => Url::fromRoute('neg_shopify.settings'),
        '#attributes' => [
          'title' => t('Shopify'),
          'class' => ['toolbar-icon', 'toolbar-icon-shopify'],
        ],
      ],
      'tray' => [
        '#heading' => t('Shopify admin pages'),
        'shopify_links' => [
          '#theme' => 'item_list',
          '#items' => $links,
          '#attributes' => [
            'class' => ['toolbar-menu'],
          ],
          '#attached' => [
            'library' => [
              'neg_shopify/shopify.toolbar',
            ],
          ],
        ],
      ],
      '#weight' => -5,
      '#cache' => [
        'contexts' => ['user.roles'],
      ],
    ];
  }

  return $items;
}

/**
 * Returns an array of Shopify admin links.
 */
function neg_shopify_renderable_links() {

  $user = \Drupal::currentUser();
  $links = [];

  if ($user->hasPermission('administer shopify api')) {
    $links[] = [
      '#type' => 'link',
      '#title' => t('Settings'),
      '#url' => Url::fromRoute('neg_shopify.settings'),
    ];
  }

  if ($user->hasPermission('administer shopify')) {
    $links[] = [
      '#type' => 'link',
      '#title' => t('View Products'),
      '#url' => Url::fromRoute('entity.shopify_product.collection'),
    ];
    $links[] = [
      '#type' => 'link',
      '#title' => t('View Collections'),
      '#url' => Url::fromUri('internal:/admin/structure/taxonomy/manage/shopify_collections/overview'),
    ];
    $links[] = [
      '#type' => 'link',
      '#title' => t('View Tags'),
      '#url' => Url::fromUri('internal:/admin/structure/taxonomy/manage/shopify_tags/overview'),
    ];
    $links[] = [
      '#type' => 'link',
      '#title' => t('Product Display'),
      '#url' => Url::fromUri('internal:/admin/structure/shopify_product/display'),
    ];
    $links[] = [
      '#type' => 'link',
      '#title' => t('Variant Display'),
      '#url' => Url::fromUri('internal:/admin/structure/shopify_product_variant/display'),
    ];
    $links[] = [
      '#type' => 'link',
      '#title' => t('Vendor Display'),
      '#url' => Url::fromUri('internal:/admin/structure/shopify_vendor/display'),
    ];
  }

  $shop_domain = Settings::shopInfo('domain');
  if (!empty($shop_domain)) {
    $links[] = [
      '#type' => 'link',
      '#title' => t('Shopify Admin &rarr;'),
      '#url' => Url::fromUri('https://' . Settings::shopInfo('domain') . '/admin', ['attributes' => ['target' => '_blank']]),
    ];
  }
  return $links;
}

/**
 * Implements hook_preprocess().
 */
function neg_shopify_preprocess_shopify_product_grid(&$variables) {

  if (substr($variables['products_label'], -1, 1) === 's' && $variables['count'] == 1) {
    $variables['products_label'] = substr($variables['products_label'], 0, strlen($variables['products_label']) - 1);
  }
}

/**
 * Preprocesses receipts.
 *
 * This is mostly to find product images if shopify doesn't supply them.
 */
function neg_shopify_preprocess_neg_shopify_order_receipt(&$variables) {

  foreach ($variables['order']['lineItems']['edges'] as &$line) {
    $lineItem = &$line['node'];

    // Shopify doesn't have an image. Let's try and find from out database.
    if ($lineItem['sku'] !== NULL && $lineItem['image'] === NULL) {

      $results = \Drupal::entityTypeManager()
        ->getStorage('shopify_product_variant')
        ->getQuery()
        ->condition('sku', $lineItem['sku'])
        ->range(0, 1)
        ->execute();

      $variants = (count($results) > 0) ? ShopifyProductVariant::loadMultiple($results) : [];

      if (count($variants) > 0) {
        $variant = reset($variants);
        $product = $variant->getProduct();
        $lineItem['thumbnail'] = $product->renderThumbnail();
      }
    }
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function neg_shopify_preprocess_taxonomy_term(&$variables) {
  $term = $variables['term'];
  $vid = $term->bundle();
  $method = '_neg_shopify_preprocess_taxonomy_term_' . $vid;
  if (function_exists($method)) {
    $method($variables);
  }
}

/**
 * Preprocess Collections.
 */
function _neg_shopify_preprocess_taxonomy_term_shopify_collections(&$variables) {
  ShopifyCollection::render($variables);
}

/**
 * Implements theme_suggestions__shopify_vendor.
 */
function neg_shopify_theme_suggestions_shopify_vendor(array $variables) {
  $suggestions = [];
  $suggestions[] = 'shopify_vendor__' . $variables['elements']['#view_mode'];
  return $suggestions;
}

/**
 * Implements theme_suggestions__shopify_product.
 */
function neg_shopify_theme_suggestions_shopify_product(array $variables) {
  $suggestions = [];
  $suggestions[] = 'shopify_product__' . $variables['elements']['#view_mode'];
  return $suggestions;
}

/**
 * Implements theme_suggestions__shopify_product_variant.
 */
function neg_shopify_theme_suggestions_shopify_product_variant(array $variables) {
  $suggestions = [];
  $suggestions[] = 'shopify_product_variant__' . $variables['elements']['#view_mode'];
  return $suggestions;
}

/**
 * Prepares variables for shopify product templates.
 *
 * Default template: shopify-product.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 *   - shopify_product: The shopify product object.
 *   - view_mode: View mode; e.g., 'full', 'store_listing', etc.
 */
function template_preprocess_shopify_vendor(array &$variables) {
  $entity = $variables['elements']['#shopify_vendor'];
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  $variables['shopify_vendor'] = $variables['elements']['#shopify_vendor'];
  $variables['attributes']['class'][] = 'shopify-vendor';
  $variables['attributes']['class'][] = $variables['view_mode'];

  // Helpful $content variable for templates.
  $variables += ['content' => []];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }

  $variables['name'] = $entity->get('title')->value;
  $variables['slug'] = $entity->get('slug')->value;
  $variables['type'] = $entity->get('type')->value;
  $variables['status'] = $entity->get('status')->value;

  $variables['attributes']['class'][] = ($variables['status'] == TRUE) ? 'published' : 'unpublished';

  $variables['url'] = !$variables['shopify_vendor']->isNew() ? $variables['shopify_vendor']->toUrl('canonical')->toString() : NULL;
}

/**
 * Prepares variables for shopify product templates.
 *
 * Default template: shopify-product.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 *   - shopify_product: The shopify product object.
 *   - view_mode: View mode; e.g., 'full', 'store_listing', etc.
 */
function template_preprocess_shopify_product(array &$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  $variables['shopify_product'] = $variables['elements']['#shopify_product'];
  $variables['shopify_product_id'] = $variables['shopify_product']->id();

  if ($variables['shopify_product']->image->target_id) {
    $path = $variables['shopify_product']->image->entity->getFileUri();
    $variables['imagethumbnail'] = ImageStyle::load('rs_image_800w')->buildUrl($path);
    $variables['imagethumbnail_large'] = ImageStyle::load('rs_image_2200w')->buildUrl($path);
  }

  $vendor = $variables['shopify_product']->getShopifyVendor();
  if ($vendor) {
    $variables['vendor_url'] = $vendor->toUrl('canonical')->toString();
  }

  // Helpful $content variable for templates.
  $variables += ['content' => []];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }

  $variables['url'] = !$variables['shopify_product']->isNew() ? $variables['shopify_product']->toUrl('canonical')->toString() : NULL;
}

/**
 * Prepares variables for shopify product variant templates.
 *
 * Default template: shopify-product-variant.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 *   - shopify_product_variant: The shopify product variant object.
 *   - view_mode: View mode; e.g., 'full', 'store_listing', etc.
 */
function template_preprocess_shopify_product_variant(&$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  $variables['shopify_product_variant'] = $variables['elements']['#shopify_product_variant'];
  $variables['shopify_product'] = $variables['shopify_product_variant']->getProduct();

  // Helpful $content variable for templates.
  $variables += ['content' => []];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }

  if ($variables['shopify_product_variant']->get('compare_at_price')->value == 0) {
    unset($variables['content']['compare_at_price']);
  }

  $variables['currency'] = Settings::shopInfo()->currency;

  $variables['url'] = $variables['shopify_product']->toUrl('canonical')->setOptions([
    'query' => [
      'variant_id' => $variables['shopify_product_variant']->get('variant_id')->value,
    ],
  ])->toString();

  if (!$variables['shopify_product_variant']->get('dynamic_product_image')->isEmpty()) {
    $image = $variables['shopify_product_variant']->get('dynamic_product_image')->first()->entity;
    $variables['imagethumbnail_large'] = ImageStyle::load('rs_image_2200w')->buildUrl($image->getFileUri());
  }

}

/**
 * Implements hook_preprocess_paragraph().
 */
function neg_shopify_preprocess_paragraph(&$variables) {
  $method = '_neg_shopify_process_paragraph_' . $variables['paragraph']->getType();

  if (function_exists($method)) {
    $method($variables);
  }
}

/**
 * Preproccess Shopify Product paragraph.
 */
function _neg_shopify_process_paragraph_shopify_product(&$variables) {
  $variables['attributes']['class'][] = 'col';
  $variables['attributes']['class'][] = 'paragraph';
  $variables['attributes']['class'][] = 'paragraph-shopify-product';

  if (!$variables['paragraph']->field_product->isEmpty()) {
    $entity = $variables['paragraph']->field_product->entity;
    if ($entity) {
      $published_at = $entity->get('published_at')->value;
      $published = ($published_at !== NULL && time() > $published_at);

      if ($published && $entity->get('is_available')->value == TRUE) {
        $variables['product'] = $entity->getView('store_listing');
      }
    }
  }

}

/**
 * Preproccess Collections paragraph.
 */
function _neg_shopify_process_paragraph_shopify_collection(&$variables) {
  $variables['attributes']['class'][] = 'col';
  $variables['attributes']['class'][] = 'paragraph';
  $variables['attributes']['class'][] = 'paragraph-shopify-collection';

  if (!$variables['paragraph']->field_header_title->isEmpty()) {
    $variables['header_title'] = $variables['paragraph']->field_header_title->value;
  }

  if (!$variables['paragraph']->field_products_to_display->isEmpty()) {
    $variables['products_to_display'] = (int) $variables['paragraph']->field_products_to_display->value;
  }

  if (!$variables['paragraph']->field_collection->isEmpty()) {
    $entity = $variables['paragraph']->field_collection->entity;
    if ($entity !== NULL) {
      $variables['term'] = $entity;
      $variables['title'] = $entity->getName();
      $variables['url'] = Url::fromRoute('entity.taxonomy_term.canonical', [
        'taxonomy_term' => $entity->id(),
      ])->toString();
      ShopifyCollection::renderParagraph($variables);
    }
  }

}

/**
 * Implements hook_cron().
 */
function neg_shopify_cron() {

  $config = Settings::config();
  $runtime = time();

  // Products.
  $cache_lifetime = $config->get('products_frequency');
  $cache_lifetime = ($cache_lifetime === NULL) ? 0 : $cache_lifetime;

  $last_sync = \Drupal::state()->get('neg_shopify.last_product_sync', 0);

  // Check if we need to sync.
  if ((int) $cache_lifetime > 0 && (((int) $last_sync + (int) $cache_lifetime) < (int) $runtime)) {
    Sync::syncAllProducts();
  }

  // Collections.
  $cache_lifetime = $config->get('collections_frequency');
  $cache_lifetime = ($cache_lifetime === NULL) ? 0 : $cache_lifetime;

  $last_sync = \Drupal::state()->get('neg_shopify.last_collection_sync', 0);

  // Check if we need to sync.
  if ((int) $cache_lifetime > 0 && (((int) $last_sync + (int) $cache_lifetime) < (int) $runtime)) {
    Sync::syncAllCollections();
  }

  // Users.
  $cache_lifetime = $config->get('users_frequency');
  $cache_lifetime = ($cache_lifetime === NULL) ? 0 : $cache_lifetime;

  $last_sync = \Drupal::state()->get('neg_shopify.last_users_sync', 0);

  // Check if we need to sync.
  if ((int) $cache_lifetime > 0 && (((int) $last_sync + (int) $cache_lifetime) < (int) $runtime)) {
    Sync::syncAllUsers();
  }
}

/**
 * Watches for user deletions and cleans up state.
 */
function neg_shopify_entity_delete(EntityInterface $entity) {
  if ($entity->getEntityTypeId() === 'user') {
    UserManagement::clearShopifyUserState($entity);
    UserManagement::clearShopifyUserDetailsState($entity);
  }
}

/**
 * Implements hook_preprocess_user.
 */
function neg_shopify_preprocess_user(&$vars) {
  $allowShopifyLogins = (BOOL) Settings::config()->get('allow_shopify_users');
  $user = $vars['user'];

  if ($allowShopifyLogins && $user->hasRole('shopify_customer')) {
    $customer = new ShopifyCustomer([
      'user' => $user,
    ]);

    $vars['content']['order_history'] = $customer->renderOrderHistoryBlock(10);
  }
}
