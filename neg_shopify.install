<?php

use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\neg_shopify\Settings;

/**
 * Adds "shopify_product.is_available"
 */
function neg_shopify_update_8702(&$sandbox) {
  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  $entity_type = $definition_update_manager->getEntityType('shopify_product');
  $last_installed_schema_repository = \Drupal::service('entity.last_installed_schema.repository');
  $field_storage_definitions = $last_installed_schema_repository->getLastInstalledFieldStorageDefinitions('shopify_product');

  $field_storage_definitions['is_available'] = BaseFieldDefinition::create('boolean')
    ->setName('is_available')
    ->setLabel(t('Available for Sale'))
    ->setDefaultValue(FALSE)
    ->setTargetEntityTypeId('shopify_product')
    ->setTargetBundle(NULL)
    ->setReadOnly(TRUE)
    ->setDisplayConfigurable('view', TRUE);

  $definition_update_manager->updateFieldableEntityType($entity_type, $field_storage_definitions, $sandbox);

  return t('Add shopify_product.is_available');
}

/**
 * Adds "shopify_product.low_price"
 */
function neg_shopify_update_8703(&$sandbox) {
  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  $entity_type = $definition_update_manager->getEntityType('shopify_product');
  $last_installed_schema_repository = \Drupal::service('entity.last_installed_schema.repository');
  $field_storage_definitions = $last_installed_schema_repository->getLastInstalledFieldStorageDefinitions('shopify_product');

  $field_storage_definitions['low_price'] = BaseFieldDefinition::create('decimal')
    ->setName('low_price')
    ->setTargetEntityTypeId('shopify_product')
    ->setTargetBundle(NULL)
    ->setLabel(t('Low Price'))
    ->setReadOnly(TRUE)
    ->setSettings([
      'precision' => 10,
      'scale' => 2,
    ])
    ->setDisplayOptions('view', [
      'label' => 'above',
      'type' => 'shopify_price',
      'weight' => -4,
    ])
    ->setDisplayOptions('form', [
      'type' => 'number',
      'weight' => -4,
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  $definition_update_manager->updateFieldableEntityType($entity_type, $field_storage_definitions, $sandbox);

  return t('Added shopify_product.low_price');
}

/**
 * Adds "shopify_product.vendor_slug"
 */
function neg_shopify_update_8704(&$sandbox) {
  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  $entity_type = $definition_update_manager->getEntityType('shopify_product');
  $last_installed_schema_repository = \Drupal::service('entity.last_installed_schema.repository');
  $field_storage_definitions = $last_installed_schema_repository->getLastInstalledFieldStorageDefinitions('shopify_product');

  $field_storage_definitions['vendor_slug'] = BaseFieldDefinition::create('string')
    ->setName('vendor_slug')
    ->setTargetEntityTypeId('shopify_product')
    ->setTargetBundle(NULL)
    ->setReadOnly(TRUE)
    ->setLabel(t('Vendor Slug'))
    ->setDefaultValue('')
    ->setDisplayOptions('form', [
      'type' => 'string_textfield',
      'weight' => 2,
    ])
    ->setDisplayConfigurable('form', FALSE)
    ->setDisplayConfigurable('view', FALSE);

  $definition_update_manager->updateFieldableEntityType($entity_type, $field_storage_definitions, $sandbox);

  return t('Added shopify_product.vendor_slug');
}

/**
 * Adds "shopify_product indexes"
 */
function neg_shopify_update_8708(&$sandbox) {

  db_query("ALTER TABLE shopify_product ADD INDEX shopify_product__avaiable (is_available)");
  db_query("ALTER TABLE shopify_product ADD INDEX shopify_product__vendor_slug (vendor_slug)");
  db_query("ALTER TABLE shopify_product ADD INDEX shopify_product__low_price (low_price)");

  return t('Added shopify_product indexes');
}
